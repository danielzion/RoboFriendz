{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","length","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAceA,MAZf,YAAmC,IAAnBC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MAAOC,EAAK,EAALA,GACzB,OACI,sBAAKC,UAAU,sDAAf,UACK,qBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,mBACtB,gCACI,6BAAKF,IACL,4BAAIC,WCaLK,MAnBf,YAA+B,IAAXC,EAAU,EAAVA,OAChB,OACI,8BAEQA,EAAOC,KAAI,SAACC,EAAKC,GACb,OACI,cAAC,EAAD,CAEIR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,OAHZS,SCOlBC,EAdG,SAAC,GAAiC,EAA/BC,YAAgC,IAApBC,EAAmB,EAAnBA,aAC7B,OACI,qBAAKV,UAAU,MAAf,SACI,uBACCA,UAAU,mCACXW,KAAK,SACLC,YAAY,gBACZC,SAAUH,O,MCCPI,MARf,SAAgBC,GACZ,OACI,qBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAO,kBAAmBC,OAAQ,SAApE,SACKJ,EAAMK,YCyCJC,E,kDAvCX,aAAe,IAAD,8BACV,gBAaJC,eAAiB,SAACC,GAClB,EAAKC,SAAS,CAAEf,YAAac,EAAME,OAAOC,SAbtC,EAAKC,MAAQ,CACTvB,OAAQ,GACRK,YAAa,IAJP,E,qDAQd,WAAqB,IAAD,OAChBmB,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAU,EAAKR,SAAS,CAAEpB,OAAQ4B,S,oBAO9C,WACI,MAA8BC,KAAKN,MAA5BvB,EAAP,EAAOA,OAAQK,EAAf,EAAeA,YACTyB,EAAiB9B,EAAO+B,QAAO,SAAAC,GACjC,OAAOA,EAAMvC,KAAKwC,cAAcC,SAAS7B,EAAY4B,kBAEzD,OAAQjC,EAAOmC,OAGP,sBAAKvC,UAAU,KAAf,UACI,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWU,aAAcuB,KAAKX,iBAC9B,cAAC,EAAD,UACI,cAAC,EAAD,CAAWlB,OAAQ8B,SAN9B,oBAAIlC,UAAU,KAAd,4B,GAzBKwC,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCCdO,IAASC,OAEP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.dbb9c239.chunk.js","sourcesContent":["\r\n\r\nfunction Card({ name, email, id }){\r\n    return (\r\n        <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\r\n             <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\r\n            <div>\r\n                <h4>{name}</h4>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import Card from './Card'\r\n\r\nfunction CardList({ robots }) {\r\n    return (\r\n        <div>\r\n            {\r\n                robots.map((user,i) => {\r\n                    return(\r\n                        <Card\r\n                            key={i}     \r\n                            id={robots[i].id} \r\n                            name={robots[i].name} \r\n                            email={robots[i].email} \r\n                         />\r\n                     );\r\n                })\r\n            }\r\n            </div>\r\n        );\r\n    }\r\n\r\nexport default CardList;","\r\n\r\nconst SearchBox = ({ searchfield,searchChange }) => {\r\n    return(\r\n        <div className='pa2'>\r\n            <input\r\n             className='pa3 ba b--green bg-lightest-blue'\r\n            type='search' \r\n            placeholder='search robots'\r\n            onChange={searchChange}\r\n             />\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default SearchBox","\r\n\r\nfunction Scroll(props){\r\n    return (\r\n        <div style={{overflowY: 'scroll', border:'5px solid black', height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll","import React, { Component } from 'react';\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from '../components/SearchBox.js';\r\nimport './App.css'\r\nimport Scroll from '../components/Scroll'\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: ''\r\n        }\r\n    } \r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n          .then(response=> response.json())\r\n          .then(users => {this.setState({ robots: users})});\r\n      }\r\n\r\n    onSearchChange = (event) => {\r\n    this.setState({ searchfield: event.target.value})\r\n    }\r\n\r\n    render(){\r\n        const {robots, searchfield} = this.state\r\n        const filteredRobots = robots.filter(robot =>{\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n        })\r\n        return !robots.length ?\r\n             <h1 className='tc'>Loading...</h1> : \r\n            (\r\n                <div className='tc'>\r\n                    <h1 className='f1'>RoboFriends</h1>\r\n                    <SearchBox searchChange={this.onSearchChange}/>\r\n                    <Scroll>\r\n                        <CardList  robots={filteredRobots} />\r\n                    </Scroll>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    \r\n \r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\n\nReactDOM.render(\n\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}